const Path = require("path");

const {get,set,upperFirst,camelCase,extend,kebabCase,last} = require("lodash");
const fs = require("fs-extra");
const chalk = require("chalk");
const YAWN = require('yawn-yaml/cjs');

const log = require("@ombiel/aek-cli-support/logger");
const templater = require("@ombiel/aek-cli-support/templater");


module.exports = {
  name: "gen:tile-component",
  help: "Create a new tile component in your CMTileSDK project",
  nolist: true,
  options: [
    {
      name: "desc",
      default: "My Tile",
      required: true,
      promptIfMissing: true,
      message: "Please provide a description for your component",
    },
    {
      name: "componentName",
      default: (data)=>{
        let cName = upperFirst(camelCase(get(data,"desc","MyTile")));
        if (cName.indexOf("Tile") < 0) {
          cName = `${cName}Tile`;
        }
        return cName;
      },
      required: true,
      promptIfMissing: true,
      validate: (input)=>{
        return input.match(/^[A-Z][a-zA-Z]+$/) ? true : "Tile component names must start with a capital letter and only contain alphabetic characters";
      },
      message: "Please provide a name for your tile component",
    }
  ],

  callback: (options)=>{

    const {desc,componentName} = options;

    const filename = kebabCase(componentName);

    const runserverYamlPath = Path.resolve("./runserver.yaml");
    const bundlePath = Path.resolve("./src/client/bundle.js");
    const tilesConfPath = Path.resolve("./tiles.conf.json");

    const modRunserver = fs.readFile(runserverYamlPath)
    .catch(()=>{
      return [
        'homepage:',
        '  dummy: dummy',
      ].join("\n");
    })
    .then((origYaml)=>{
      const yawn = new YAWN(origYaml.toString());
      const json = yawn.json || {};
      if (json.homepage) {
        delete json.homepage.dummy;
      }
      const target = get(json,"homepage.menu.replace",get(json,"homepage.menu.append"));
      const newTile = {
        desc,
        tileComponent: componentName,
      };
      if (target) {
        target.push(newTile);
      }
      else {
        set(json,"homepage.menu.replace",[newTile]);
      }
      yawn.json = json;
      return fs.writeFile(runserverYamlPath,yawn.yaml)
      .then(()=>{
        log.info(`${chalk.cyan("Modified")} ${chalk.magenta("runserver.yaml")}`);
      });
    });


    const templatePath = Path.resolve(__dirname,`../templates/tiles`);
    const copyTemplate = templater(templatePath,"./",extend({filename},options))
    .then((files)=>{
      files.forEach((file)=>{
        log.info(`${chalk.blue("Created")} ${chalk.green(file)}`);
      });
    });

    const modBundle = fs.readFile(bundlePath)
    .catch(()=>{
      return [
        'import {registerTileComponent} from "@ombiel/cm-tile-sdk";',
        '',
      ].join("\n");
    })
    .then((bundleCode)=>{
      bundleCode = bundleCode.toString();

      // find imports
      const importToInject = `import ${componentName} from "./tiles/${filename}/components/${filename}";`;
      const imports = bundleCode.match(/^import .*["'].*["'];?/gm);
      if (imports) {
        const lastMatch = last(imports);
        bundleCode = bundleCode.replace(lastMatch,`${lastMatch}\n${importToInject}`);
      }
      else {
        bundleCode = `${importToInject}\n${bundleCode}`;
      }

      return `${bundleCode}\nregisterTileComponent(${componentName},"${componentName}");\n`;
    })
    .then((bundleCode)=>{
      return fs.ensureFile(bundlePath)
      .then(()=>{
        return fs.writeFile(bundlePath,bundleCode);
      });
    })
    .then(()=>{
      log.info(`${chalk.cyan("Modified")} ${chalk.magenta("src/client/bundle.js")}`);
    });

    const modTilesConf = fs.readJson(tilesConfPath)
    .catch(()=>{
      return {};
    })
    .then((json)=>{
      const tileComponents = get(json,"tileComponents",{});
      tileComponents[componentName] = {
        script: "bundle.js",
      };
      json.tileComponents = tileComponents;
      return fs.writeJson(tilesConfPath,json,{spaces: 2});
    })
    .then(()=>{
      log.info(`${chalk.cyan("Modified")} ${chalk.magenta("tiles.conf.json")}`);
    });

    return Promise.all([
      modRunserver,
      modBundle,
      modTilesConf,
      copyTemplate,
    ]);

  }
};
