const express = require("express");
const Path = require("path");
const fs = require("fs-extra");
const { getDC } = require("@ombiel/aek-cli-support/utils");
const log = require("@ombiel/aek-cli-support/logger");
const { getStoredCreds } = require("@ombiel/aek-cli-support/auth");
const request = require("../lib/request-promise");

module.exports = function serverActionMiddleware(options = {}) {

  const { userDetails, targetBaseURL } = options;
  const { username } = userDetails;
  const dc = getDC(username);

  const previews = {};

  const router = express.Router();

  const pkgPath = Path.resolve("./package.json");

  let _pkgPromise;
  function fetchPackage() {
    _pkgPromise = fs.readJson(pkgPath);
  }

  fs.watch("./package.json",fetchPackage);

  fetchPackage();

  function getPackageName() {
    return _pkgPromise.then((pkg)=>{
      return pkg.name.replace(/^@ombiel\//,"");
    });
  }

  function checkPreview(actionName) {
    const preview = previews[actionName] || {promise: Promise.resolve()};
    const srcPath = Path.resolve(`./src/server/${actionName}.action.twig`);

    if (!previews[actionName]) {
      previews[actionName] = preview;
      fs.watchFile(srcPath,()=>{
        log.info(`ServerAction: detected change in "${actionName}"`);
        checkPreview(actionName);
      });
    }
    
    preview.promise = preview.promise.then(()=>{
      log.info(`ServerAction: checking code for "${actionName}"`);
      return fs.readFile(srcPath)
      .then((code)=>{
        code = code.toString();
        const origCode = preview.code;
        preview.code = code;
        if (code && (code === origCode) && preview.url) { 
          log.info(`ServerAction: code unchanged for "${actionName}"`);
          return preview; 
        }
        delete preview.url;

        if (!code) { 
          log.warn(`ServerAction: no code obtained for "${actionName}"`);
          return preview; 
        }

        log.info(`ServerAction: generating preview for "${actionName}"`);

        return getStoredCreds()
        .then(({ token }) => {
          return request
          .post(
            `${options.appManagerBase || dc.appManagerBase}/aek/tools/save_preview`,
            {
              strictSSL: !options.bypassSSLVerification,
              form: {
                source: code,
                username: dc.username,
                token: token,
                hostname: options.hostname
              }
            }
          )
          .then(([, amBody]) => {
            const parsedResponse = JSON.parse(amBody);
            preview.url = parsedResponse.url.replace(targetBaseURL, "");
            log.info(`ServerAction: preview for "${actionName}" generated: ${preview.url}`);
          });
        });

      })
      .catch((err)=>{
        preview.err = err;
        delete preview.url;
        delete preview.code;
        log.error(err);
      })
      .then(()=>preview);
    });
  }


  function getPreview(actionName) {
    if (!previews[actionName]) {
      checkPreview(actionName);
    }

    return previews[actionName].promise;
  }

  function getPreviewUrl(actionName) {
    return getPreview(actionName)
    .then(({url})=>{
      return url;
    });
  }

  

  router.all("/server-action/:orgCode/:packageName/:actionName",(req,res,next)=>{

    const {packageName,actionName} = req.params;

    // log.info("server action intercepted",actionName);

    getPackageName().then((name)=>{
      // log.info("retreived packageName",name);
      if (name !== packageName) {
        next();
        return;
      }
      getPreviewUrl(actionName)
      .then((url)=>{
        req.aekScreenPath = url;
      })
      .catch(()=>{ /*empty*/ })
      .then(next);
    });

  });


  return router;


};
