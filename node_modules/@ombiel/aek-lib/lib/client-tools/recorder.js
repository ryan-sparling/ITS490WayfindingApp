import {EventEmitter} from "@ombiel/cm-lib";
import RecorderJS from 'recorder-js';
import clientTools from "../client-tools";

import { getPlatform } from "../utils";
import { getAudioStream, exportBuffer } from './utils/audio';

let recorder;
const params = {};

export default class Recorder extends EventEmitter {
  constructor() {
    super();
    this.ios = false;
    params.cb = this.trigger.bind(this);
    this.start = this.start.bind(this);
  }
  
  async start() {
    this.on("audioFile error", function () {
      this.off();
    });
    let stream;
    const platform = getPlatform();
    stream = null;
    try {
      stream = await getAudioStream();
    }
    catch (err) {
      if (platform === "web2") {
        this.trigger('error', { type: "browser", errorDescription: "Browser doesn't support audio"} );
        return;
      }
    }
    
    // If not stream and platform is not web2 we can assume we are on iOS
    // Might need better checking here
    
    if (!stream && platform !== "web2") {
      this.ios = true;
      this.on("audio", function (audio) {
        var audioFile = `data:audio/wav;base64,${audio.audioData}`;
        this.trigger('audioFile', { audioData: audioFile });
        this.off();
      });
      clientTools.invoke("micRecStart", params);
    }
    else {
      this.ios = false;
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      recorder = new RecorderJS(audioContext);
      recorder.init(stream);
      recorder.start();
    }
  }

  async stop() {
    if (this.ios) {
      clientTools.invoke("micRecStop");
    }
    else {
      const { buffer } = await recorder.stop();
      const audio = exportBuffer(buffer[0]);
      var audioFile = URL.createObjectURL(audio);
      this.trigger('audioFile', { audioData: audioFile });
      
    }
  }


}
